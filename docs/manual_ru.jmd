
---
title: MetidaNCA - Руководство по эксплуатации
author: Владимир Арнаутов
date: `j import Dates; Dates.Date(Dates.now())`
lang: ru
mainfont: DejaVuSans
monofont: DejaVuSansMono
---


```julia; echo = false
using Dates, DataFrames, CSV, PrettyTables, Latexify, LaTeXStrings, Plots
```

\pagebreak

# Введение

## Что такое NCA?

Некомпартментный анализ (NCA) — это метод оценки фармакокинетических параметров без предположений о структуре компартментной модели. 
Он основан на прямом анализе данных концентрации лекарственного препарата во времени, что делает анализ интуитивно понятным простым и быстрым.

## MetidaNCA

MetidaNCA позволяет проводить пакетное вычисление фармакокинетических (ФК) параметров 
с использованием некомпартментных методов (NCA – Non-Compartmental Analysis). 
Данный метод обработки данных выполняется в хоте анализа результатов клинических исследований лекарственных средств. 
MetidaNCA обеспечивает:

* Импорт данных (фармакокинетический профилей);
* Вычисление фармакокинетических параметров: площадь под кривой концентрация-время (AUC), максимальная концентрация (Cmax), время достижения максимальной концентрации (Tmax), константа элиминации (Kel), период полувыведения (HL), среднее время удержания (MRT) и др.;
* Вычисление фармакокинетических параметров для исследования концентраций в моче: количество выведенного препарата (AR), площадь под кривой концентрация-время (AUC), максимальная концентрация (Cmax), время достижения максимальной концентрации (Tmax);
* Вычисление фармакодинамических параметров;
* Вывод графиков;
* Вывод данных в табличном виде.

Пакет MetidaNCA может применяться на всех системах, которые поддерживаются языком Julia: x86-64, ARMv8, i686.

Язык программирования: Julia.

Автоматически обновляемая докуентация доступна по ссылкам:

  * Версия в разработке: [https://pharmcat.github.io/MetidaNCA.jl/dev/](https://pharmcat.github.io/MetidaNCA.jl/dev/)
  * Стабильный релиз: [https://pharmcat.github.io/MetidaNCA.jl/stable/](https://pharmcat.github.io/MetidaNCA.jl/stable/)

Сборка руководства по эксплуатации выполнена в окружении:

```julia; echo = false; results = "hidden"
using MetidaNCA, Pkg
pkgversion(m::Module) = Pkg.TOML.parsefile(joinpath(dirname(string(first(methods(m.eval)).file)), 
"..", "Project.toml"))["version"]
ver = pkgversion(MetidaNCA)
```
* Julia version: `j Sys.VERSION`
* Current machine: `j Sys.MACHINE`
* MetidaNCA: `ver`

## Преимущества MetidaNCA

* Бесплатность и открытый код.
* Наличие документации и примеров использования.
* Интеграция с экосистемой Julia для сложных вычислений.
* Высокая скорость обработки данных благодаря Julia.

## Julia

Julia — высокоуровневый свободный язык программирования с динамической типизацией, созданный для математических вычислений, 
имеет встроенную поддержку многопоточности и распределённых вычислений, реализованные в том числе в стандартных конструкциях. 
Julia применяется как язык программирования и среда вычисления на различных платформах, таких как Российская платформа математических вычислений
и динамического моделирования Engee и др.

Сайт: https://julialang.org/

\pagebreak

# Требования

* Установленная Julia 1.8 (и выше) для Операционной системы/Архитектуры в Тир 1 (Tier 1) списке 
(см. [Supported platforms](https://julialang.org/downloads/#supported_platforms)).

*Tier 1: Julia is guaranteed to build from source and pass all tests on these platforms when built with the default options. 
  Official binaries are always available and CI is run on every commit to ensure support is actively maintained.*

Для использования MetidaNCA могут потребоваться пакеты для работы с табличными данными (DataFrames), 
CSV таблицами (CSV) и графиками (Plots). При этом пакеты DataFrames и CSV не являются зависимостями для MetidaNCA. 
Предполагается, что MetidaNCA работоспособна с пакетами, которые поддерживают
интерфейс Tables (для таблиц) и RecipeBase (для графиков). 

## Цикл разработки MetidaNCA

Обычный выпуск обновлений выполняется следующим образом:

  * Разработка программы (дополнений)
  * Разработка тестировочных процедур
  * Проверка на локальной машине
  * Релиз ветви разработчика
  * Pull request в основную ветвь
  * Проведение тестировочных процедур при помощи GitHub Actions
  * При успешном тестировании слияние с основной ветвью (при необходимости)
  * Релиз новой версии (при необходимости)

## Версии

  * X.Y.Z - patch release (без критических изменений, нет значимых функциональных изменений если X != 0)
  * X.Y.0 - minor release (возможны критические изменения если X = 0)
  * X.0.0 - major release (критические изменения, возможны изменения API)
  * 0.#.# - данные версии не гарантируют неизменность API
  * 1.#.# or higher - стабильный публичный API (переход на слкдующую версию не гарантирует полное сохранение API, 
  тем не менее стабильность API является приоритетов при разработке последующих релизов)

## Поддержка

Тестироваочные процедуры с использованием GitHub Actions выполняются для следующих комбинаций версий Julia/Операционной системы/Архитектуры: 

* julia-version: 1.8, 1
* julia-arch: x64
* os: ubuntu-latest, macOS-latest, windows-latest

Где "1" - последняя стабильная версия Julia.  Проведение тестироваочных процедур для версии "1.8" не исключает, 
что MetidaNCA не будет работоспособна на более ранних версиях. Однако, тестирование MetidaNCA для систем не включенных
в список полностью в зоне ответственности пользователя. 

\pagebreak

# Установка

## Установка Julia

Установка Julia зависит от операционной системы ползователя согласно руководству:  [Install julia](https://julialang.org/downloads/#install_julia)

## Установка MetidaNCA

MetidaNCA устанавливается из регистра пакетов Julia путем выполнения следующей команды в REPL:

```julia; eval = false
import Pkg; Pkg.add("MetidaNCA")
```

Непосредственно с сайта GitVerse.ru:

```julia; eval = false
import Pkg; Pkg.add(url="https://gitverse.ru/PharmCat/MetidaNCA.jl.git")
```

Непосредственно с сайта GitHub.com:

```julia; eval = false
import Pkg; Pkg.add(url="https://github.com/PharmCat/MetidaNCA.jl.git")
```

**Совет**: Убедитесь, что у вас установлены пакеты CSV, DataFrames и Plots для импорта CSV файлов, работы с данными и графиками. 
Импорт данных может быть выполнен из различных источников, к примеру используя фалы Microsoft EXCEL и пакет XLSX.jl.  
Работа с данными может выполняться с использованием любых пакетов, которые поддерживают интерфейс Tables.jl.


## Пользовательская валидация

MetidaNCA поставляется с набором валидационных (тестировочных) процедур, 
которые направлены на проверку работоспособности программы в конкретном окружении. 

При проведении тестирования выполняются стандартные функции пакета MetidaNCA с 
последующим сравнением с заранее известными значениями (значения вычисленных параметров 
получены с использованием других программных продуктов предназначенных для вычисления 
фармакокинетических параметров: Phoenix WinNonlin и др.). 

Для запуска валидационных процедур выполнить:

```julia; eval = false
import Pkg; Pkg.test("MetidaNCA")
```

\pagebreak

## Покрытие

Покрытие кода тестами контролируется с использованием ресурса: [Codecov.io](https://app.codecov.io/gh/PharmCat/MetidaNCA.jl)

* Цель: покрытие >= 90.0%

## Данные для тестирования

Поставляются с пакетом (./test/csv/*.csv).

\pagebreak

# Описание фармакокинетических параметров

Следующие фармакокинетические параметры могут быть получены в ходе анализа ФК профилей:

```julia; echo = false, results = "tex"

dfn = DataFrame(
["Cmax" "Maximum concentration" "Максимальная концентрация"
"Tmax" "Time at Cmax" "Время достижения Cmax"
"Cdose" "Concentration at dose time" "Концентрация в момент дозирования"
"Clast" "Last non-zero concentration" "Последняя ненулевая концентрация"
"AUClast" "AUC to Clast" "AUC до Clast"
"AUMClast" "AUMC to Clast" "AUMC до Clast"
"AUCall" "AUC with all values" "AUC с включением всех концентраций"
"Rsq" "r square" "Коэффициент r квадрат"
"ARsq" "Adjusted r square" "Коэффициент r квадрат с поправкой"
"Kel" "Terminal elimination constant" "Терминальная константа элиминации"
"HL" "Half live or T1/2" "Период полувыведения"
"LZint" "Intercept" "Intercept (свободный член)"
"Clast_pred" "Predicted Clast" "Предсказанная Clast"
"AUCinf" "AUC extrapolated to infinity" "AUC экстраполированная до бесконечности"
"AUCinf_pred" "AUC extrapolated to infinity using Clast_pred" "AUC экстраполированная до бесконечности используя Clast_pred"
"AUCpct" "Percentage AUClast from AUCinf" "Доля AUClast в AUCinf (%)"
"MRTlast" "Mean Residence Time (last)" "Среднее время удержания (Clast)"
"MRTinf" "Mean Residence Time (inf)" "Среднее время удержания (inf)"
"Clinf" "Clearence" "Клиренс (кажущийся)"
"Vzinf" "Volume of distribution" "Объем распределения (кажущийся)"
"Ctaumin" "Minimum concentration between dose time and dose time + Tau" "Минимальная концентрация и интервале от времени дозирования до времени дозирования + Tau"
"Cavg" "AUCtau divided by Tau." "AUCtau разделенная на Tau."
"Accind" "Accumulation Index" "Индекс аккумуляции"
"Fluc" "Fluctuation" "Флуктуация"
"MRTtauinf" "MRT based on Tau" "MRT в границах Tau"
"MRTtauinf_pred" "Mean residence time (inf) predicted based on Tau" "MRT (inf) в границах Tau"
"AUCtau" "AUC in Tau range" "AUC в границах Tau"
"AUMCtau" "AUMC in Tau range" "AUMC в границах Tau"
"MRTtauinf" "MRT based on Tau" "MRT в границах Tau"
"MRTtauinf_pred" "MRT (inf) predicted based on Tau" "MRT в границах Tau используя AUCinf_pred" 
"Cltau" "Clearence in Tau range" "Клиренс в границах Tau"
"Vztau" "Volume of distribution in Tau range" "Объем распределения Tau"], ["Название", "Описание(EN)", "Описание(RU)"])
#pretty_table(dfn; tf = tf_ascii_rounded)
show(latexify(dfn; latex=false))
```
Таблица: Описание параметров

\pagebreak

# Основные шаги при работе с пакетом MetidaNCA

Стандартные сценарии использования пакета MetidaNCA обычно предполагают следующие этапы:

* Импорт данных
* Модификация импортированных данных (при необходимости)
* Получение параметров
* Построение графиков
* Экспорт результатов

Пример загрузки табличных данных:

```julia; eval = false
# Загрузка данных

pkdata2  = CSV.File(joinpath(dirname(pathof(MetidaNCA)), 
"..", "test", "csv", "pkdata2.csv")) |> DataFrame
```

```julia; echo = false
pkdata2  = CSV.File(joinpath(dirname(pathof(MetidaNCA)), "..", "test", "csv", "pkdata2.csv")) |> DataFrame
```

Подробная информация о работе с табличными данными при помощи пакета DataFrames: [DataFrames](https://dataframes.juliadata.org/stable/)

Пример табличных данных:

```julia; echo = true; wrap = false; line_width = 75
pkdata2[1:15, :]
```

## Импорт данных

Для пакетного импорта данных таблица должна содержать следующие поля:

* Время (Float64) - уникальное в пределах SubjectID;
* Концентрация (Float64);
* Уникальный идентификатор субъекта (SubjectID) (если субъектов > 1) - одно или несколько полей.

```julia; echo = true; wrap = false; line_width = 75
# Импорт данных

ds = pkimport(pkdata2, :Time, :Concentration, [:Subject, :Formulation];
dosetime = DoseTime(dose = 100, time = 0))
```

## Выполнение вычислений

Для одного субъекта:

```julia; echo = true; wrap = false; line_width = 75
dsnca1 = nca!(ds[1], adm = :ev, calcm = :lint, verbose = 1)
```

Для всего набора данных:

```julia; echo = true; wrap = false; line_width = 75
dsnca  = nca!(ds, adm = :ev, calcm = :lint)

dsnca[3:4]
```

Основные ключевые слова для функции 'nca!' определяют свойства анализа:

* adm - тип приема плекарственного препарата: `:ev` - экстраваскулярный,`:iv` - внутрисосудисто болюсно;
* calcm - метод вычисления трапеций: `:lint` - линейные трапеции, `:luld` - линейные трапеции для восходящих и лог-трапеции для нисходящих отрезков,
`:luldt` - линейные трапеции для восходящих и лог-трапеции для нисходящих отрезков после Tmax, `:logt` - лог-трапеции после Tmax;
* `intpm` - метод интерполяции: `:lint` - линейный,`:luld` - линейный для восходящих и логарифмический для нисходящих отрезков,
`:luldt` - линейный для восходящих и логарифмический для нисходящих отрезков после Tmax,`:logt` - огарифмический после Tmax, 
`:calcm` - тотже что указан для метод вычисления трапеций;

## Построение графиков

Построение графиков выполняется с исползованием пакета RecipesBase. 
Это значит, что для построения могут быть использованы пакеты совместимые с RecipesBase.jl 
(на данный момент - Plots.jl).

Для субъекта:

```julia; eval = false
pkplot(ds[1])
```

![Один субъект](`j pkplot(ds[1])`)

Для набора данных:

```julia; eval = false
pkplot(ds; typesort = :Subject, pagesort = MetidaNCA.NoPageSort(), 
sort = Dict(:Formulation => "R"))
```

![Набор субъектов](`j pkplot(ds; typesort = :Subject, pagesort = MetidaNCA.NoPageSort(), sort = Dict(:Formulation => "R"))`)

При использовании ключевого слова `pagesort` - возможно выведение сгруппированных графиков:

```julia; eval = false
plt = pkplot(ds; typesort = :Subject, pagesort = :Formulation)
nothing
```
Препарат 1:

![Препарат 1](`j plt[1]`)

Препарат 2:

![Препарат 2](`j plt[2]`)


\pagebreak

## Экспорт результатов

Для экспорта таблиц может быть использован пакет DataFrames.jl:

```julia; echo = true; wrap = false; line_width = 75
dsnca = DataFrame(dsnca)

show(latexify(dsnca[1:6, 1:6]; latex=false))
```

С последующим сохранением в виде CSV или XLSX файла (CSV.jl, XLSX.jl)

```julia; eval = false; echo = true; wrap = false; line_width = 75
CSV.write("nca_export.csv", dsnca)
```

\pagebreak

# Дополнительные функции

## LimitRule

Правила для замены наблюдений ниже LLOQ и неопределенных значений (NaN).

```julia; eval = false; echo = true; wrap = false; line_width = 75
lr = LimitRule(;lloq = 0.5, btmax = 0.0, atmax = NaN, 
nan = NaN, rm = true)

applylimitrule!(ds, lr)
```

## DoseTime

Установка дозы и времени дозирование.

```julia; eval = false; echo = true; wrap = false; line_width = 75
dt = DoseTime(dose = 110, time = 2.1, tau = 10)

setdosetime!(ds[1], dt)
```

## ElimRange

Установка границ для расчета константы элиминации:

```julia; eval = false; echo = true; wrap = false; line_width = 75
kr =  ElimRange(kelstart = 4, kelend = 12)

setkelrange!(ds, kr; kelauto = true)
```

\pagebreak

# API

Подробное описание API составляется автоматически при релизе новой версии и доступно по адресу: [API](https://pharmcat.github.io/MetidaNCA.jl/stable/api/).

# Методы вычисление параметров фармакокинетики

## Основные этапы.

Если не указано другое, то по умолчанию при вычислении ФК параметров используется последняя доза в списке событий дозирования. 
При этом не учитываются все данные наблюдений, которые были получены до момента этого события. При помощи ключевого слова `usedose`
можно указать номер события дозирования, которое будет использоваться для вычислений.

Вычисление ФК параметров выполняется в несколко этапов:

1. Игнорируются все события до указанного события дозирования, игнорируются  `NaN` или  `missing` наблюдения.

2. Вычисляются Cmax и Tmax, интерполируются `NaN` и `missing` значения.

3. Вычисляются параметры элиминации.

4. Выполняется сдвиг времени таким образом чтобы время дозировани ясчиталось "нулевой" точкой.

5. Вычисляется Cdose.

6. Вычисляются площади (AUC и AUMC).

7. Вычисляются параметры "равновесной" ФК (в случае если указано tau).

## Параметры

### Cmax

Максимальная концентрация измеренная после дозирования, исползуется первое значение после времени дозирования. 

### Tmax

Время достижения максимальной концентрации, исползуется первое значение после времени дозирования. 

### AUC / AUMC

Area under Curve / Area under the Moment Curve:

$AUC = \sum_{n=1}^N AUC_{n}$

$AUMC = \sum_{n=1}^N AUMC_{n}$

#### Правило линейных трепеций

Линейные трапеции расчитываются следующим образом: 

$AUC\mid_{t_1}^{t_2} = \delta t \times \frac{C_1 + C_2}{2}$

$AUMC\mid_{t_1}^{t_2} = \delta t \times \frac{t_1 \times C_1 + t_2 \times C_2}{2}$

#### Правило лог-трепеций

Лог-трапеции расчитываются следующим образом: 

$AUC\mid_{t_1}^{t_2} =   \delta t \times \frac{ C_2 - C_1}{ln(C_2/C_1)}$

$AUMC\mid_{t_1}^{t_2} = \delta t \times \frac{t_2 \times C_2 - t_1 \times C_1}{ln(C_2/C_1)} -  \delta t^2 \times \frac{ C_2 - C_1}{ln(C_2/C_1)^2}$

## Пропущенные значения и интерполяция

### Правило линейной интерполяции

$C_x = C_1 + \frac{(t_x-t_1)\times(C_2 - C_1)}{t_2 - t_1}$

### Правило лог-интерполяции

$C_x = exp\left(ln(C_1) + \frac{(t_x-t_1)\times(ln(C_2) - ln(C_1))}{t_2 - t_1}\right)$

### MRTlast

Среднее время удержания:

$MRT_{last} = AUMC_{last} / AUC_{last}$

### Kel

$\lambda_z$ - константа элиминации. Для расчета используется линейная регрессия для логарифмированных данных на терминальном участке.

### HL

Время полувыведения; T1/2

$HL = ln(2) / \lambda_z$

### AUCinf

$AUC_\infty = AUC_{last} + \frac{C_{last}}{\lambda_z}$

### AUMCinf

$AUMC_\infty =  AUMC_{last} + \frac{t_{last}\times C_{last}}{\lambda_z} + \frac{C_{last}}{\lambda_z^2}$

### AUCpct

$AUCpct = (AUC_\infty - AUC_{last}) / AUC_\infty * 100 \%$


##  Параметры равновесной концентрации (если указано τ)

$τ-time = dose_time + τ$

### AUCtau

AUC до τ-time.

### AUMCtau

AUMC до τ-time.

### Ctau

Концентрация в τ-time.

### :Ctaumin

Минимальная концертрация от времени дозирования до τ-time.

### Cavg


$C_{avg} = AUC_\tau / \tau$

### Fluc

Флуктуация

$Fluc = ( C_{max} - C_{\tau min} ) / C_{avg} * 100 \%$

### Fluctau

Флуктуация Tau

$Fluc\tau = ( C_{max} - C_{\tau} ) / C_{avg} * 100 \%$

### Accind

Индекс аккумуляции.

$Accind = \frac{1}{1 - exp(-\lambda_z \tau)}$

### MRTtauinf

$MRT_{\tau\inf} = \frac{AUMC_\tau + \tau * (AUC_\infty - AUC_\tau)}{AUC_\tau}$

### MRTtauinf_pred

$MRT_{\tau\inf} = \frac{AUMC_\tau + \tau * (AUC_{\infty pred} - AUC_\tau)}{AUC_\tau}$

### Swing

$Swing = (C_{max} - C_{\tau min}) / C_{\tau min}$

### Swingtau

$Swing_{\tau} = (C_{max} - C_{\tau}) / C_{\tau}$

\pagebreak

# Валидация

Информация о валидации программного обеспечения представлена в отчете: [MetidaNCA Validation Report](https://pharmcat.github.io/MetidaNCA.jl/stable/validation_report.pdf).

# Типичные ошибки и их устранение

* Неверный формат данных
Проверьте, что столбцы Time и Concentration имеют тип Float64. Убедитесь, что данные не содержат текстовых значений.
В некоторых случаях возможен автоматический парсинг строк, но желательно не допускать таких событий,
 т.к. возможен некорректный или неполный парсинг значений.

* Проблемы с графиками

Убедитесь, что пакет Plots установлен (import Pkg; Pkg.add("Plots")).
Проверьте правильность параметров typesort и pagesort.
Работа MetidaNCA с другими пакетами для построения графиков не гарантируется.

# Глоссарий

  * Repository - GitHub repository: https://github.com/PharmCat/MetidaNCA.jl
  * Master branch - main branch on GitHub ([link](https://github.com/PharmCat/MetidaNCA.jl/tree/main)).
  * Current machine - pc that used for validation report generating.
  * AUC - площадь под фармакокинетической кривой — кривой «концентрация—время».
  * AUMC - площадь под кривой «произведение времени на концентрацию препарата tC».
  * Cmax - Максимальная концентрация препарата в крови.
  * HL - период полувыведения (время, за которое концентрация препарата уменьшается вдвое).
  * Kel - Константа элиминации (характерезует скорость выведения препарата).
  * LLOQ - Нижний предел количественного определения (Lower Limit of Quantification).
  * REPL (от англ. read-eval-print loop — «цикл "чтение — вычисление — вывод"») — форма организации простой интерактивной среды программирования в рамках средств интерфейса командной строки.
  * Tau - интервал дозирования (время).
  * Tmax - Время достижения максимальной концентрации.
  * тестовое покрытие (test coverage): Степень, с которой данный тест проверяет требования для программного продукта 

# Ссылки

* Gabrielsson J, Weiner D. Non-compartmental analysis. Methods Mol Biol. 2012;929:377-89. doi: 10.1007/978-1-62703-050-2_16. PMID: 23007438.
* [ГОСТ Р ИСО/МЭК 12207-2010](https://docs.cntd.ru/document/1200082859?section=text)
* [MetidaNCA Documentation EN](https://pharmcat.github.io/MetidaNCA.jl/stable/)
* [MetidaNCA Validation Report](https://pharmcat.github.io/MetidaNCA.jl/stable/validation_report.pdf)

# Обратная связь

Сообщения об ошибках, а также сообщения для улчучшения программного обеспечения может быть направлена:

* по адресу mail@pharmcat.net 
* В разделе [Issues](https://github.com/PharmCat/MetidaNCA.jl/issues) на сайте github.com
* Форум Julia: https://discourse.julialang.org


