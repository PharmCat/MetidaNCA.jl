
---
title: MetidaNCA validation report
author: Vladimir Arnautov
date: `j import Dates; Dates.Date(Dates.now())`
---


```julia; echo = false
using Dates, DataFrames, CSV, PrettyTables, Latexify
```

# Introduction and package description

Non-compartment anlysis software.

See documentation:

  * Dev: [https://pharmcat.github.io/MetidaNCA.jl/dev/](https://pharmcat.github.io/MetidaNCA.jl/dev/)
  * Stable: [https://pharmcat.github.io/MetidaNCA.jl/stable/](https://pharmcat.github.io/MetidaNCA.jl/stable/)

## Validation purpose

The main validation purpose is confirmation by examination and provision of objective evidence that software
specifications conform to user needs and intended uses, and that the particular requirements
implemented through software can be consistently fulfilled.

## Requirements

  * Julia 1.6.* (or higher) installed
  * Julia packages from dependence list installed (see [Project.toml](https://github.com/PharmCat/MetidaNCA.jl/blob/main/Project.toml))

## Developer software life cycle

  * Development stage
  * Testing procedures development
  * Performing testing procedures on local machine
  * Push to master branch
  * Performing testing procedures with GitHub Actions
  * Make pull request to the official registry of general Julia packages (if nessesary)
  * Make release (if previous completed)

### Versions

  * X.Y.Z - patch release (no breaking changes)
  * X.Y.0 - minor release (may include breaking changes if X = 0)
  * X.0.0 - major release (breaking changes, changes in public API)
  * 0.#.# - no stable public API
  * 1.#.# or higher - stable public API

## Build support

### Tier 1

  * julia-version: 1.6, 1.7
  * julia-arch: x64
  * os: ubuntu-18.04, macos-10.15, windows-2019

\pagebreak

# Installation

## System information

 * Julia version: `j Sys.VERSION`
 * Current machine: `j Sys.MACHINE`

## Installation method

MetidaNCA.jl can be installed by executing the following command in REPL:

```julia; eval = false
import Pkg; Pkg.add("MetidaNCA")
```

## Version check

The installation process is checking within each testing job via GitHub Actions.
Also GitHub Action [chek](https://github.com/JuliaRegistries/General/blob/master/.github/workflows/automerge.yml)
performed before merging into JuliaRegistries/General repository
(see [Automatic merging of pull requests](https://github.com/JuliaRegistries/General#automatic-merging-of-pull-requests)).

```julia; echo = false; results = "hidden"
using MetidaNCA, Pkg
pkgversion(m::Module) = Pkg.TOML.parsefile(joinpath(dirname(string(first(methods(m.eval)).file)), "..", "Project.toml"))["version"]
ver = pkgversion(MetidaNCA)
```

Current package version:
```julia; echo = false; results = "tex"
ver
```

# Operation qualification

This part of validation based on testing procedures entails running software products under known conditions with defined inputs and
documented outcomes that can be compared to their predefined expectations. All documented public API included in testing procedures and part of
critical internal methods.

## Coverage

Code coverage report available on [Codecov.io](https://app.codecov.io/gh/PharmCat/MetidaNCA.jl).
Test procedures include all  public API methods check.

* Coverage goal: >= 90.0%

## Data

Validation data available in the repository and included in the package. See Appendix 1.

## Testing results

```julia
Pkg.test("MetidaNCA")
```

\pagebreak

# Performance qualification

Purpose of this testing procedures to demonstrate performance for some critical tasks.
Results from MetidaNCA compared with Phoenix WinNonlin 8.0 results, see Appendix 2.

## Parameter's names description

```julia; echo = false, results = "tex"

dfn = DataFrame(
["Cmax" "Maximum concentration"
"Tmax" "Time at Cmax"
"Cdose" "Concentration at dose time"
"Clast" "Last non-zero concentration"
"AUClast" "AUC to Clast"
"AUMClast" "AUMC to Clast"
"AUCall" "AUC with all values"
"Rsq" "r square"
"ARsq" "Adjusted r square"
"Kel" "Terminal elimination constant"
"HL" "Half live or T1/2"
"LZint" "Intercept"
"Clast_pred" "Predicted Clast"
"AUCinf" "AUC extrapolated to infinity"
"AUCpct" "Percentage AUClast from AUCinf"
"MRTlast" "Mean Residence Time (last)"
"MRTinf" "Mean Residence Time (inf)"
"Clinf" "Clearence"
"Vzinf" "Volume of distribution"
"AUCtau" "AUC in Tau range"
"AUMCtau" "AUMC in Tau range"
"MRTtauinf" "MRT based on Tau"
"Cltau" "Clearence in Tau range"
"Vztau" "Volume of distribution in Tau range"], ["Name", "Description"])

pkdata2  = CSV.File(joinpath(dirname(pathof(MetidaNCA)), "..", "test", "csv", "pkdata2.csv")) |> DataFrame
upkdata  = CSV.File(joinpath(dirname(pathof(MetidaNCA)), "..", "test", "csv", "upkdata.csv")) |> DataFrame
pddata   = CSV.File(joinpath(dirname(pathof(MetidaNCA)), "..", "test", "csv", "pddata.csv")) |> DataFrame
ds = MetidaNCA.pkimport(pkdata2, :Time, :Concentration, [:Subject, :Formulation]; dosetime = MetidaNCA.DoseTime(dose = 100, time = 0))
sort!(ds, :Subject)
#pretty_table(dfn; tf = tf_ascii_rounded)
show(latexify(dfn; latex=false))
```
Table: Parameter description

\pagebreak

## Output example

**Import data:**

```julia; eval = false
pkdata2  = CSV.File(
joinpath(dirname(pathof(MetidaNCA)), "..", "test", "csv", "pkdata2.csv")
) |> DataFrame
ds = pkimport(pkdata2, :Time, :Concentration, [:Subject, :Formulation];
dosetime = DoseTime(dose = 100, time = 0))
sort!(ds, :Subject)
```

**Execute NCA:**

```julia; echo = true; wrap = false; line_width = 75
MetidaNCA.nca!(ds[1], adm = :ev, calcm = :lint, verbose = 1)
```

\pagebreak

## Results

### Linear-trapezoidal rule; Extravascular; Dosetime 0.0; No Tau; Dose 100

**Code:**

```julia; eval = false
nca!(ds, adm = :ev, calcm = :lint)
```

```julia; echo = false, results = "tex"

include("refdict.jl")

header = ["Parameter", "Subject", "Value", "Reference", "Difference"]

list = [:Cmax
:Tmax
:Cdose
:Clast
:AUClast
:AUMClast
:AUCall
:Rsq
:ARsq
:Kel
:HL
:Clast_pred
:AUCinf
:AUCpct
:MRTlast
:MRTinf
:Clinf
:Vzinf]

dsnca = MetidaNCA.nca!(ds, adm = :ev, calcm = :lint)

subjects = MetidaNCA.getid(dsnca, :, :Subject)
dft = DataFrame("Parameter"=>[], "Subject"=>[], "Value"=>[], "Reference"=>[], "Difference"=>[])
for l in list
    vals = round.(dsnca[:, l], sigdigits = 6)
    refs = round.(refdict[l], sigdigits = 6)
    mx = hcat(fill(l, length(vals)), subjects, vals, refs, vals .- refs)
    df = DataFrame(mx, header)
    df.Subject = string.(Int.(df.Subject))
    append!(dft, df)
end
show(latexify(dft))
```
Table: Plasma data results, Linear-trapezoidal rule, Extravascular

\pagebreak

### Linear-Up Log-Down; Extravascular; Dosetime 0.25; Tau 9; Dose 100

**Code:**

```julia; eval = false
setdosetime!(ds, DoseTime(dose = 100, time = 0.25, tau = 9))
nca!(ds, adm = :ev, calcm = :luld)
```

```julia; echo = false, results = "tex"

list = [:Cmax
:Tmax
:Cdose
:Clast
:AUClast
:AUCtau
:AUMCtau
:AUCall
:Rsq
:ARsq
:Kel
:HL
:Clast_pred
:AUCinf
:AUCpct
:MRTtauinf
:Cltau
:Vztau]

dt = MetidaNCA.DoseTime(dose = 100, time = 0.25, tau = 9)
MetidaNCA.setdosetime!(ds, dt)
dsnca = MetidaNCA.nca!(ds, adm = :ev, calcm = :luld)

subjects = MetidaNCA.getid(dsnca, :, :Subject)
dft = DataFrame("Parameter"=>[], "Subject"=>[], "Value"=>[], "Reference"=>[], "Difference"=>[])
for l in list
    vals = round.(dsnca[:, l], sigdigits = 6)
    refs = round.(refdict2[l], sigdigits = 6)
    mx = hcat(fill(l, length(vals)), subjects, vals, refs, vals .- refs)
    df = DataFrame(mx, header)
    df.Subject = string.(Int.(df.Subject))
    append!(dft, df)
end
show(latexify(dft))
```
Table: Plasma data results, Linear-Up Log-Down, Extravascular

\pagebreak

### Linear-trapezoidal rule; Intravascular; Dosetime 0.0; Tau 12; Dose 120

**Code:**

```julia; eval = false
setdosetime!(ds, DoseTime(dose = 120, time = 0.0, tau = 12))
nca!(ds, adm = :iv, calcm = :lint)
```

```julia; echo = false, results = "tex"

list = [:Cmax
:Tmax
:Cdose
:Clast
:AUClast
:AUCtau
:AUMCtau
:AUCall
:Rsq
:ARsq
:Kel
:HL
:Clast_pred
:AUCinf
:AUCpct
:MRTtauinf
:Cltau
:Vztau]

dt = MetidaNCA.DoseTime(dose = 120, time = 0.0, tau = 12)
MetidaNCA.setdosetime!(ds, dt)
dsnca = MetidaNCA.nca!(ds, adm = :iv, calcm = :lint)

subjects = MetidaNCA.getid(dsnca, :, :Subject)
dft = DataFrame("Parameter"=>[], "Subject"=>[], "Value"=>[], "Reference"=>[], "Difference"=>[])
for l in list
    vals = round.(dsnca[:, l], sigdigits = 6)
    refs = round.(refdict3[l], sigdigits = 6)
    mx = hcat(fill(l, length(vals)), subjects, vals, refs, vals .- refs)
    df = DataFrame(mx, header)
    df.Subject = string.(Int.(df.Subject))
    append!(dft, df)
end
show(latexify(dft))
```
Table: Plasma data results, Linear-trapezoidal rule, Intravascular

\pagebreak

### Linear/Log Trapezoidal rule; Extravascular; Dosetime 0.0; Tau 12; Dose 120

**Code:**

```julia; eval = false
setdosetime!(ds, DoseTime(dose = 120, time = 0.0, tau = 12))
nca!(ds, adm = :ev, calcm = :logt)
```

```julia; echo = false, results = "tex"

list = [:Cmax
:Tmax
:Cdose
:Clast
:AUClast
:AUCtau
:AUMCtau
:AUCall
:Rsq
:ARsq
:Kel
:HL
:Clast_pred
:AUCinf
:AUCpct
:MRTtauinf
:Cltau
:Vztau]

dt = MetidaNCA.DoseTime(dose = 120, time = 0.0, tau = 12)
MetidaNCA.setdosetime!(ds, dt)

dsnca = MetidaNCA.nca!(ds, adm = :ev, calcm = :logt)

subjects = MetidaNCA.getid(dsnca, :, :Subject)
dft = DataFrame("Parameter"=>[], "Subject"=>[], "Value"=>[], "Reference"=>[], "Difference"=>[])
for l in list
    vals = round.(dsnca[:, l], sigdigits = 6)
    refs = round.(refdict4[l], sigdigits = 6)
    mx = hcat(fill(l, length(vals)), subjects, vals, refs, vals .- refs)
    df = DataFrame(mx, header)
    df.Subject = string.(Int.(df.Subject))
    append!(dft, df)
end
show(latexify(dft))
```
Table: Plasma data results, Linear/Log Trapezoidal rule, Extravascular

\pagebreak

### Urine data; Linear-trapezoidal rule; Extravascular; Dosetime 0.0; Dose 100

**Code:**

```julia; eval = false
upkds = upkimport(upkdata, :st, :et, :conc, :vol, :subj;
dosetime =  MetidaNCA.DoseTime(dose = 100))
MetidaNCA.nca!(upkds)
```

```julia; echo = false, results = "tex"

list = collect(keys(urefdict))

upkds = MetidaNCA.upkimport(upkdata, :st, :et, :conc, :vol, :subj;
dosetime =  MetidaNCA.DoseTime(dose = 100))
dsnca  = MetidaNCA.nca!(upkds)
pname = string.(list)
vals = zeros(Float64, length(list))
refs = zeros(Float64, length(list))
for i = 1: length(list)
    vals[i] = round(dsnca[1, list[i]], sigdigits = 6)
    refs[i] = round(urefdict[list[i]], sigdigits = 6)
end

  mx = hcat(pname, vals, refs, vals .- refs)
  df = DataFrame(mx, ["Parameter", "Value", "Reference", "Difference"])
  show(latexify(df))
```
Table: Urine data results

\pagebreak



### Pharmacodynamics data; Linear-trapezoidal rule

**Code:**

```julia; eval = false
pd =  MetidaNCA.pdimport(pddata, :time, :obs; bl = 3.0, th = 1.5, id = Dict(:subj => 1))
pdres = MetidaNCA.nca!(pd)
```

```julia; echo = false, results = "tex"

list = collect(keys(pdrefdict))

pd =  MetidaNCA.pdimport(pddata, :time, :obs; bl = 3.0, th = 1.5, id = Dict(:subj => 1))
pdres = MetidaNCA.nca!(pd)
pname = string.(list)
vals = zeros(Float64, length(list))
refs = zeros(Float64, length(list))
for i = 1: length(list)
    vals[i] = round(pdres[list[i]], sigdigits = 6)
    refs[i] = round(pdrefdict[list[i]], sigdigits = 6)
end

  mx = hcat(pname, vals, refs, vals .- refs)
  df = DataFrame(mx, ["Parameter", "Value", "Reference", "Difference"])
  show(latexify(df))
```
Table: Pharmacodynamics data results

\pagebreak



# Glossary

  * Installation qualification (IQ) - Establishing confidence that process equipment and ancillary systems are compliant with appropriate codes and approved design intentions, and that manufacturer's recommendations are suitably considered.
  * Operational qualification (OQ) Establishing confidence that process equipment and sub-systems are capable of consistently operating within established limits and tolerances.
  * Product performance qualification (PQ) - Establishing confidence through appropriate testing that the finished product produced by a specified process meets all release requirements for functionality and safety.
  * Repository - GitHub repository: https://github.com/PharmCat/MetidaNCA.jl
  * Master branch - main branch on GitHub ([link](https://github.com/PharmCat/MetidaNCA.jl/tree/main)).
  * Current machine - pc that used for validation report generating.

# Reference

* [General Principles of Software Validation; Final Guidance for Industry and FDA Staff](https://www.fda.gov/media/73141/download)
* [Guidance for Industry Process Validation: General Principles and Practices](https://www.fda.gov/files/drugs/published/Process-Validation--General-Principles-and-Practices.pdf)
* [Glossary of Computer System Software Development Terminology](https://www.fda.gov/inspections-compliance-enforcement-and-criminal-investigations/inspection-guides/glossary-computer-system-software-development-terminology-895)

\pagebreak

# Appendix 1

### Testing PK dataset.

```julia; echo = false

pretty_table(pkdata2; tf = tf_ascii_rounded, header = names(pkdata2))
```

\pagebreak

### Testing urine PK dataset.
```julia; echo = false

pretty_table(upkdata; tf = tf_ascii_rounded, header = names(upkdata))
```

\pagebreak

### Testing PD dataset.
```julia; echo = false

pretty_table(pddata; tf = tf_ascii_rounded, header = names(pddata))
```

\pagebreak

# Appendix 2

### Reference output.

Avialible at [https://github.com/PharmCat/MetidaNCA.jl/tree/main/docs/src/pdf](https://github.com/PharmCat/MetidaNCA.jl/tree/main/docs/src/pdf).

See [Appendix 2.1.pdf](https://github.com/PharmCat/MetidaNCA.jl/blob/main/docs/src/pdf/Appendix2.1.pdf),

[Appendix 2.2.pdf](https://github.com/PharmCat/MetidaNCA.jl/blob/main/docs/src/pdf/Appendix2.2.pdf),

[Appendix 2.3.pdf](https://github.com/PharmCat/MetidaNCA.jl/blob/main/docs/src/pdf/Appendix2.3.pdf),

[Appendix 2.4.pdf](https://github.com/PharmCat/MetidaNCA.jl/blob/main/docs/src/pdf/Appendix2.4.pdf),

[Appendix 2.5.pdf](https://github.com/PharmCat/MetidaNCA.jl/blob/main/docs/src/pdf/Appendix2.5.pdf).
